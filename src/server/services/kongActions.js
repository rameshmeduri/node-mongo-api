import Ajax from '../utils/ajax';
import config from '../config';
import logger from '../utils/logger';

// Initialize Rest client and get rest endpoints
//
// Rest client config
const kongBaseOptions = {
  baseURL: config.kongApiURL,
  timeout: 10000,
};

if (config.kongToken && config.kongToken !== '') {
  kongBaseOptions.Authorization = config.kongToken;
}

const { postRequest, getRequest, putRequest } = new Ajax(kongBaseOptions);

// Handlers
//
// for liniting reasons
let kongRestActions = {};

//
// API logic
//
// Handler for configuring api plugins
function configureApiPlugins(id, plugins) {
  const { auth, aclGroup, ipRestriction, rateLimit } = plugins;
  const { registerApiPlugin } = kongRestActions;
  const promises = [];

  // Base config per plugin
  // TODO: extract to DB maybe?
  const conf = {
    acl: { name: 'acl', config: { whitelist: aclGroup } },
    ipRestriction: { name: 'ip-restriction', config: { whitelist: ipRestriction.whitelist, blacklist: ipRestriction.blacklist } },
    rateLimit: { name: 'rate-limiting', config: rateLimit },
    jwt: { name: 'jwt', config: { key_claim_name: 'iss', uri_param_names: ['jwt'], secret_is_base64: false, anonymous: '' } },
    key_auth: { name: 'key-auth', config: { hide_credentials: false, key_names: ['apiKey'], key_in_body: true, anonymous: '' } },
    basic_auth: { name: 'basic-auth', config: { hide_credentials: true, anonymous: '' } },
  };
  
  // General api plugins
  promises.push(
    Promise.resolve(id), // pass the ID generated by Kong to be saved in mongoDB
    registerApiPlugin(id, conf.acl),
    registerApiPlugin(id, conf.ipRestriction),
    registerApiPlugin(id, conf.rateLimit)
  );

  // Authentication plugins
  promises.push(
    auth.map(type => registerApiPlugin(id, { name: conf[type].name, config: conf[type].config }))
  );

  return Promise.all(promises)
    .then(results => results)
    .catch((err) => {
      const msg = (err.response && err.response.data) ? err.response.data : err.message;
      logger.error(`Error syncing with Kong. details -> ${msg}`);
      throw new Error(`Error registering plugins. msg -> ${JSON.stringify(msg)}`);
    });
}
// Entry point for API
// Creates new API and calls plugin config
function handleApis(obj) {
  let apiID = '';

  return kongRestActions.registerApi(obj.api)
    .then((result) => {
      apiID = result.data.id;
      logger.info(`Successfully registered API: '${obj.api.name}' into Kong.`);
      logger.info(` - Generated ID: ${apiID}.`);
      return configureApiPlugins(apiID, obj.plugins);
    })
    .catch((err) => {
      const msg = (err.response && err.response.data)
                  ? `Failed registering API with Kong: msg -> ${JSON.stringify(err.response.data)}`
                  : err.message;
      logger.error(`Error syncing with Kong. details -> ${msg}`);
      throw new Error(msg);
    });
}

//
// Consumer Logic
//
// Handler for registering consumer plugins
function registerConsumerPlugins(id, consumer) {
  const { credentials, aclGroups } = consumer;
  const promises = [];

  // add promises
  promises.push(
    Promise.resolve(id), // pass the ID generated by Kong to be saved in mongoDB
    // Auths
    kongRestActions.registerConsumerPlugin(id, 'jwt', {}),
    kongRestActions.registerConsumerPlugin(id, 'key-auth', {}),
    kongRestActions.registerConsumerPlugin(id, 'basic-auth', { username: credentials.basicAuth.username, password: credentials.basicAuth.password }),
    // ACL Groups
    aclGroups.map(group => kongRestActions.registerConsumerPlugin(id, 'acls', { group }))
  );

  return Promise.all(promises)
    .then(results => results)
    .catch((err) => {
      const msg = (err.response && err.response.data) ? err.response.data : err.message;
      logger.error(`Error syncing with Kong. details -> ${msg}`);
      throw new Error(`Error registering plugins. msg -> ${JSON.stringify(msg)}`);
    });
}
// Entry point for Consumer
// Creates new Consumer and calls plugin registration
function handleConsumers(obj) {
  let consumerID = '';

  return kongRestActions
    .registerConsumer(obj.consumer)
    .then((result) => {
      consumerID = result.data.id;
      logger.info(`Successfully registered Consumer: '${obj.consumer.username}' into Kong.`);
      logger.info(` - Generated ID: ${consumerID}.`);
      return registerConsumerPlugins(consumerID, obj);
    })
    .catch((err) => {
      const msg = (err.response && err.response.data)
                  ? `Failed registering consumer with Kong: msg -> ${JSON.stringify(err.response.data)}`
                  : err.message;
      logger.error(`Error syncing with Kong. details -> ${msg}`);
      throw new Error(msg);
    });
}

//
// Expose endpoints and transformers
//
module.exports = kongRestActions = {
  // Kong handlers
  handleApis,
  handleConsumers,

  // Api endpoints
  retrieveApis: () => getRequest('apis'),
  registerApi: obj => postRequest('apis', obj),
  updateApi: obj => putRequest(`apis/${obj.name}`, obj),
  registerApiPlugin: (id, conf) => postRequest(`apis/${id}/plugins`, conf),
  updateApiPlugin: (id, conf) => putRequest(`apis/${id}/plugins`, conf),

  // Consumer endpoints
  retrieveConsumers: () => getRequest('consumers'),
  registerConsumer: obj => postRequest('consumers', obj),
  updateConsumer: obj => putRequest(`consumers/${obj.username}`, obj),
  registerConsumerPlugin: (id, plugin, conf) => postRequest(`consumers/${id}/${plugin}`, conf),
  updateConsumerPlugin: obj => putRequest(`consumers/${obj.username}/plugins`, obj),
};
