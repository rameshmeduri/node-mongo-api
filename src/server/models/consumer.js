import mongoose from 'mongoose';
import crypto from 'crypto';
import Api from './api';
import * as kong from '../services/kongActions';

const Schema = mongoose.Schema;

// validator
function vName(value) {
  return /^[a-zA-Z0-9_ ~#$@!]{1,100}$/g.test(value);
}

function genRandomString() {
  return ('' + 1e10).replace(/[10]/g, b => (b ^ crypto.rng(1)[0] % 16).toString(16)); // eslint-disable-line
}

const consumerSchema = new Schema({
  name: {
    type: String,
    required: true,
    uppercase: true,
    unique: true,
    validate: [vName, 'INVALID_NAME'],
  },

  // Id generated by Kong
  kongId: {
    type: String,
  },

  // auth methods
  credentials: {
    jwt: {
      key: {
        type: String,
        default: '',
      },
      secret: {
        type: String,
        default: '',
      },
      tokenExpiryMinutes: {
        type: Number,
        default: 24 * 60, // minutes
      },
      jwt: {
        type: String,
        default: '',
      },
    },

    keyAuth: {
      keyName: {
        type: String,
        default: 'apiKey',
      },
      key: {
        type: String,
        default: '',
      },
    },

    basicAuth: {
      username: {
        type: String,
        default: '',
      },
      password: {
        type: String,
        default: '',
      },
    },     
  },

  // API Refs
  apis: {
    type: [String],
  },

  // Api Key
  aclGroups: {
    type: [String],
  },

  // Meta
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

// Construct the Kong schema representation of the inserted model
consumerSchema.virtual('kongSchema').get(function () {
  return Api.find({ name: { $in: this.apis } }, 'plugins.aclGroup', { lean: true }).exec()
    .then((result) => {
      this.aclGroups = result.map(el => el.plugins.aclGroup);
      // Basic-Auth creds      
      this.credentials.basicAuth.username = (this.credentials.basicAuth
                                    && this.credentials.basicAuth.username
                                  )
                                  ? this.credentials.basicAuth.username
                                  : genRandomString();
      this.credentials.basicAuth.password = genRandomString();

      return {
        consumer: { username: this.name },
        credentials: this.credentials,
        aclGroups: this.aclGroups,
      };
    })
    .catch((err) => { throw err; });
});

consumerSchema.pre('save', function (next) {
  if (!this.isNew) {
    this.updatedAt = Date.now();
    next();
  } else {
    this.kongSchema
    .then(res => kong.handleConsumers(res))
    .then((promises) => {
      // Kong Id
      this.kongId = promises[0];
      // jwt
      this.credentials.jwt.key = promises[1].data.key;
      this.credentials.jwt.secret = promises[2].data.secret;
      // keyAuth
      this.credentials.keyAuth.key = promises[3].data.key;

      next(); // continue
    })
    .catch((err) => {
      next(new Error(`WARNING: ${JSON.stringify(err.message)}`));
    });
  }
});

export default mongoose.model('Consumer', consumerSchema);
