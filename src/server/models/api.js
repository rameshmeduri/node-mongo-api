import mongoose from 'mongoose';
import apiPluginSchema from './plugin';
import * as kong from '../services/kongActions';

const Schema = mongoose.Schema;

function vName(value) {
  return /^[a-zA-Z0-9-_.~]{1,100}$/g.test(value);
}

const apiSchema = new Schema({
  name: {
    type: String,
    required: true,
    lowercase: true,
    unique: true,
    validate: [vName, 'INVALID_NAME'],
  },

  // Id generated by Kong
  kongId: {
    type: String,
  },

  // routing
  routing: {
    uris: [String],
    hosts: [String],
    methods: {
      type: [String],
      enum: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'],
      default: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'],
    },
    upstreamUrl: {
      type: String,
      required: true,
    },
    stripUri: {
      type: Boolean,
      default: false,
    },
  },

  // refs
  plugins: {
    type: apiPluginSchema,
    default: {},
  },

  // Meta
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

apiSchema.pre('validate', function (next) {
  const routing = this.routing || {};
  const hasUris = routing.uris && routing.uris.length;
  const hasHosts = routing.hosts && routing.hosts.length;
  const hasMethods = routing.methods && routing.methods.length;
  if (!hasUris && !hasHosts && !hasMethods) {
    next(Error('One of [routing.uris, routing.hosts, routing.methods] is required'));
    return;
  }
  next();
});

apiSchema.virtual('kongSchema').get(function () {
  const kongModel = {};
  Object.assign(kongModel, {
    api: {
      name: this.name,
      hosts: this.routing.hosts,
      strip_uri: this.routing.stripUri,
      upstream_url: this.routing.upstreamUrl,
      uris: this.routing.uris,
    },
    plugins: this.plugins,
  });

  return kongModel;
});


apiSchema.pre('save', function (next) {
  if (!this.isNew) {
    this.updatedAt = Date.now();
    next();
  } else {
    this.aclGroup = this.name;
    const kongModel = this.kongSchema;
    kongModel.plugins.aclGroup = this.aclGroup;

    kong.handleApis(kongModel)
    .then((promises) => {
      // Kong Id
      this.kongId = promises[0];

      next();
    })
    .catch((err) => {
      next(new Error(`WARNING: ${JSON.stringify(err.message)}`));
    });
  }
});

export default mongoose.model('Api', apiSchema);
